<?xml version="1.0" encoding="UTF-8"?>
<syntax name="liquid-base" subsyntax="true">
    <meta>
        <name>Liquid</name>
        <type>markup</type>
    </meta>

    <scopes>
        <include syntax="self" collection="keywords" />
        <include syntax="self" collection="operators" />
        <include syntax="self" collection="objects" />
        <include syntax="self" collection="syntax" />
        <include syntax="self" collection="other_tags" />
        <include syntax="self" collection="identifiers" />
        <include syntax="self" collection="values" />
        <include syntax="self" collection="inline_comments" />
    </scopes>
    
    <collections>

        <!-- !Comments -->
        <collection name="comments">
            <scope name="liquid.comment.block" spell-check="true">
                <starts-with>
                    <expression>(\{\%\-?)\s*(comment)\s*(\-?\%\})</expression>
                    <capture number="0" name="liquid.tag.framework.comment.start" />
                    <capture number="2" name="liquid.keyword" />
                </starts-with>
                <ends-with>
                    <expression>(?=\{\%\-?\s*endcomment\s*\-?\%\})</expression>
                    <capture number="0" name="liquid.tag.framework.comment.end" />
                </ends-with>
            </scope>
        </collection>
        
        <!-- !Inline Comments -->
        <collection name="inline_comments">
            <scope name="liquid.comment.single" spell-check="true">
                <expression>\#(.*)$</expression>
                <capture number="1" name="liquid.comment.content" />
            </scope>
        </collection>
        
        <!-- !Embedded -->
        <collection name="embeds">
            <scope name="liquid.embedded.schema" spell-check="false" lookup="documentation">
                <starts-with>
                    <expression>(?=\{\%\-?\s*(?i:schema)\b)</expression>
                </starts-with>
                <ends-with />
                <subscopes anchored="true" skip-whitespace="false">
                    <symbol type="liquid-tag">
                        <context behavior="start" group-by-name="true">
                            <auto-close string="{%" completion="end${name} %}" />
                        </context>
                    </symbol>
                    <scope name="liquid.tag.framework.schema.open">
                        <starts-with>
                            <expression>(\/?{%)\s*(?i:(schema))</expression>
                            <capture number="1" name="liquid.tag.framework.expression.start" />
                            <capture number="2" name="liquid.keyword" />
                        </starts-with>
                        <ends-with>
                            <expression>\/?%}</expression>
                            <capture number="0" name="liquid.tag.framework.expression.end" />
                        </ends-with>
                    </scope>
                    <scope name="liquid.embedded.schema.content" optional="true">
                        <starts-with>
                            <expression>(?&lt;=%})</expression>
                        </starts-with>
                        <ends-with>
                            <expression>(?=\{\%\-?\s*(?i:endschema)\b)</expression>
                        </ends-with>
                        <subsyntax name="liquid-base">
                            <cut-off>
                                <expression>(?=\{\%\-?\s*(?i:endschema)\b)</expression>
                            </cut-off>
                        </subsyntax>
                    </scope>
                </subscopes>
            </scope>
        
            <scope name="liquid.embedded.style" spell-check="false" lookup="documentation">
                <starts-with>
                    <expression>(?=\{\%\-?\s*(?i:style|stylesheet)\b)</expression>
                </starts-with>
                <ends-with />
                <subscopes anchored="true" skip-whitespace="false">
                    <symbol type="liquid-tag">
                        <context behavior="start" group-by-name="true">
                            <auto-close string="{%" completion="end${name} %}" />
                        </context>
                    </symbol>
                    <scope name="liquid.tag.framework.style.open">
                        <starts-with>
                            <expression>(\/?{%\-?)\s*(?i:(style|stylesheet))</expression>
                            <capture number="1" name="liquid.tag.framework.expression.start" />
                            <capture number="2" name="liquid.keyword" />
                        </starts-with>
                        <ends-with>
                            <expression>\-?\/?%}</expression>
                            <capture number="0" name="liquid.tag.framework.expression.end" />
                        </ends-with>
                    </scope>
                    <scope name="liquid.embedded.style.content" optional="true">
                        <starts-with>
                            <expression>(?&lt;=%})</expression>
                        </starts-with>
                        <ends-with>
                            <expression>(?=\{\%\-?\s*(?i:endstyle|endstylesheet)\b)</expression>
                        </ends-with>
                        <subsyntax name="css-liquid">
                            <cut-off>
                                <expression>(?=\{\%\-?\s*(?i:endstyle|endstylesheet)\b)</expression>
                            </cut-off>
                        </subsyntax>
                    </scope>
                </subscopes>
            </scope>
        
            <scope name="liquid.embedded.script" spell-check="false" lookup="documentation">
                <starts-with>
                    <expression>(?=\{\%\-?\s*(?i:javascript)\b)</expression>
                </starts-with>
                <ends-with />
                <subscopes anchored="true" skip-whitespace="false">
                    <symbol type="liquid-tag">
                        <context behavior="start" group-by-name="true">
                            <auto-close string="{%" completion="end${name} %}" />
                        </context>
                    </symbol>
                    <scope name="liquid.tag.framework.script.open">
                        <starts-with>
                            <expression>(\/?{%\-?)\s*(?i:(javascript))</expression>
                            <capture number="1" name="liquid.tag.framework.expression.start" />
                            <capture number="2" name="liquid.keyword" />
                        </starts-with>
                        <ends-with>
                            <expression>\-?\/?%}</expression>
                            <capture number="0" name="liquid.tag.framework.expression.end" />
                        </ends-with>
                    </scope>
                    <scope name="liquid.embedded.script.content" optional="true">
                        <starts-with>
                            <expression>(?&lt;=%})</expression>
                        </starts-with>
                        <ends-with>
                            <expression>(?=\{\%\-?\s*(?i:endjavascript)\b)</expression>
                        </ends-with>
                        <subsyntax name="javascript-liquid">
                            <cut-off>
                                <expression>(?=\{\%\-?\s*(?i:endjavascript)\b)</expression>
                            </cut-off>
                        </subsyntax>
                    </scope>
                </subscopes>
            </scope>
        </collection>
        
        <!-- !Tags -->
        <collection name="tags" override="true">
            <scope name="liquid.tag.framework.variable" spell-check="false">
                <symbol type="liquid-tag">
                    <context behavior="subtree" group-by-name="true" />
                </symbol>
                <starts-with>
                    <expression>({{)(-)?</expression>
                    <capture number="0" name="liquid.tag.framework.variable.start" override="true" />
                </starts-with>
                <ends-with>
                    <expression>(-)?(}})</expression>
                    <capture number="0" name="liquid.tag.framework.variable.end" />
                </ends-with>
                <subsyntax name="liquid-base">
                    <cut-off>
                        <expression>(?=(-)?(}}))</expression>
                    </cut-off>
                </subsyntax>
            </scope>
        
            <scope name="liquid.tag.framework.expression" spell-check="false" lookup="index">
                <symbol type="liquid-tag">
                    <context behavior="subtree" group-by-name="true" />
                </symbol>
                <starts-with>
                    <expression>({%)(-)?</expression>
                    <capture number="0" name="liquid.tag.framework.expression.start" />
                </starts-with>
                <ends-with>
                    <expression>(-)?(%})</expression>
                    <capture number="0" name="liquid.tag.framework.expression.end" />
                </ends-with>
                <subsyntax name="liquid-base">
                    <cut-off>
                        <expression>(?=(-)?(%}))</expression>
                    </cut-off>
                </subsyntax>
            </scope>
        </collection>

        <collection name="keywords">
            <scope name="liquid.keyword" spell-check="false">
                <strings>
                    <string>as</string>
                    <string>assign</string>
                    <string>block</string>
                    <string>break</string>
                    <string>capture</string>
                    <string>endcapture</string>
                    <string>case</string>
                    <string>endcase</string>
                    <string>comment</string>
                    <string>endcomment</string>
                    <string>continue</string>
                    <string>cycle</string>
                    <string>decrement</string>
                    <string>echo</string>
                    <string>else</string>
                    <string>elsif</string>
                    <string>for</string>
                    <string>endfor</string>
                    <string>form</string>
                    <string>endform</string>
                    <string>if</string>
                    <string>endif</string>
                    <string>in</string>
                    <string>increment</string>
                    <string>javascript</string>
                    <string>endjavascript</string>
                    <string>layout</string>
                    <string>liquid</string>
                    <string>paginate</string>
                    <string>endpaginate</string>
                    <string>raw</string>
                    <string>endraw</string>
                    <string>render</string>
                    <string>schema</string>
                    <string>endschema</string>
                    <string>section</string>
                    <string>sections</string>
                    <string>style</string>
                    <string>endstyle</string>
                    <string>stylesheet</string>
                    <string>endstylesheet</string>
                    <string>tablerow</string>
                    <string>endtablerow</string>
                    <string>unless</string>
                    <string>endunless</string>
                    <string>when</string>
                    <string>with</string>
                </strings>
            </scope>
        </collection>

        <collection name="operators">
            <scope name="liquid.operator" spell-check="false">
                <strings>
                    <string>=</string>
                    <string>==</string>
                    <string>!=</string>
                    <string>&lt;</string>
                    <string>&gt;</string>
                    <string>&lt;=</string>
                    <string>&gt;=</string>
                    <string>or</string>
                    <string>and</string>
                    <string>contains</string>
                </strings>
            </scope>
        </collection>

        <collection name="objects">
            <scope name="liquid.object" spell-check="false">
                <strings>
                    <string>additional_checkout_buttons</string>
                    <string>address</string>
                    <string>all_country_option_tags</string>
                    <string>all_products</string>
                    <string>article</string>
                    <string>articles</string>
                    <string>block</string>
                    <string>blog</string>
                    <string>blogs</string>
                    <string>canonical_url</string>
                    <string>cart</string>
                    <string>checkout</string>
                    <string>collection</string>
                    <string>collections</string>
                    <string>comment</string>
                    <string>content_for_additional_checkout_buttons</string>
                    <string>content_for_header</string>
                    <string>content_for_index</string>
                    <string>content_for_layout</string>
                    <string>country_option_tags</string>
                    <string>currency</string>
                    <string>current_page</string>
                    <string>current_tags</string>
                    <string>customer</string>
                    <string>customer_address</string>
                    <string>discount_allocation</string>
                    <string>discount_application</string>
                    <string>external_video</string>
                    <string>font</string>
                    <string>forloop</string>
                    <string>form</string>
                    <string>fulfillment</string>
                    <string>gift_card</string>
                    <string>handle</string>
                    <string>image</string>
                    <string>images</string>
                    <string>line_item</string>
                    <string>link</string>
                    <string>linklist</string>
                    <string>linklists</string>
                    <string>location</string>
                    <string>localization</string>
                    <string>metafield</string>
                    <string>model</string>
                    <string>model_source</string>
                    <string>order</string>
                    <string>page</string>
                    <string>page_description</string>
                    <string>page_image</string>
                    <string>page_title</string>
                    <string>pages</string>
                    <string>paginate</string>
                    <string>part</string>
                    <string>policy</string>
                    <string>powered_by_link</string>
                    <string>predictive_search </string>
                    <string>product</string>
                    <string>product_option</string>
                    <string>product_variant</string>
                    <string>recommendations</string>
                    <string>request</string>
                    <string>routes</string>
                    <string>script</string>
                    <string>scripts</string>
                    <string>search</string>
                    <string>section</string>
                    <string>selling_plan</string>
                    <string>selling_plan_allocation</string>
                    <string>selling_plan_group</string>
                    <string>settings</string>
                    <string>shipping_method</string>
                    <string>shop</string>
                    <string>shop_locale</string>
                    <string>store_availability</string>
                    <string>tablerow</string>
                    <string>tax_line</string>
                    <string>template</string>
                    <string>theme</string>
                    <string>transaction</string>
                    <string>unit_price_measurement</string>
                    <string>variant</string>
                    <string>video</string>
                    <string>video_source</string>
                </strings>
            </scope>
        </collection>

        <!-- Identifiers -->
        <collection name="identifiers">
            <!-- json -->
            <scope name="liquid.identifier">
                <expression>("[a-zA-Z_][A-Za-zÀ-ÖØ-öø-ÿ0-9_]*")(\s*\:\s)</expression>
                <capture number="1" name="liquid.identifier.property" />
                <capture number="2" name="liquid.operator" />
            </scope>
            <!-- Methods -->
            <scope name="liquid.identifier">
                <expression>(\s*\.\s*)([a-zA-Z_][A-Za-zÀ-ÖØ-öø-ÿ0-9_]*)(?=\()\b</expression>
                <capture number="2" name="liquid.identifier.method" />
            </scope>
            <!-- Filters -->
            <scope name="liquid.identifier">
                <expression>(\s*\|\s*)([a-zA-Z_][A-Za-zÀ-ÖØ-öø-ÿ0-9_]*)\b</expression>
                <capture number="1" name="liquid.operator" />
                <capture number="2" name="liquid.identifier.method" />
            </scope>
            <!-- Properties in {} -->
            <scope name="liquid.identifier">
                <expression>\b([a-zA-Z_][A-Za-zÀ-ÖØ-öø-ÿ0-9_]*)(\s*\:\s*)</expression>
                <capture number="1" name="liquid.identifier.property" />
                <capture number="2" name="liquid.operator" />
            </scope>
            <!-- Object.properties -->
            <scope name="liquid.identifier">
                <expression>(\s*\.\s*)([a-zA-Z_][A-Za-zÀ-ÖØ-öø-ÿ0-9_]*)(?!\()\b</expression>
                <capture number="1" name="liquid.operator" />
                <capture number="2" name="liquid.identifier.property" />
            </scope>
            <!-- Functions -->
            <scope name="liquid.identifier.function">
                <expression>\b(?&lt;!\.)([a-zA-Z_][A-Za-zÀ-ÖØ-öø-ÿ0-9_]*)(?=\()\b</expression>
            </scope>
        </collection>
        
        <!-- Values -->
        <collection name="values">
            <scope name="liquid.string.double-quoted">
                <starts-with>
                    <expression>&quot;</expression>
                    <capture number="0" name="liquid.string.double-quoted.delimiter" />
                </starts-with>
                <ends-with>
                    <expression>&quot;|(?:(?&lt;!\\)$)</expression>
                    <capture number="0" name="liquid.string.double-quoted.delimiter" />
                </ends-with>
                <subscopes>
                    <scope name="liquid.string.double-quoted.escape">
                        <expression>\\(?:\\|&quot;|n|r|t|b|f)</expression>
                    </scope>
                </subscopes>
            </scope>
            <scope name="liquid.string.single-quoted">
                <starts-with>
                    <expression>&apos;</expression>
                    <capture number="0" name="liquid.string.single-quoted.delimiter" />
                </starts-with>
                <ends-with>
                    <expression>&apos;|(?:(?&lt;!\\)$)</expression>
                    <capture number="0" name="liquid.string.single-quoted.delimiter" />
                </ends-with>
                <subscopes>
                    <scope name="liquid.string.single-quoted.escape">
                        <expression>\\(?:\\|&apos;|n|r|t|b|f)</expression>
                    </scope>
                </subscopes>
            </scope>
            <scope name="liquid.value.null">
                <strings>
                    <string>null</string>
                </strings>
            </scope>
            <scope name="liquid.value.boolean">
                <strings>
                    <string>true</string>
                    <string>false</string>
                </strings>
            </scope>
            <scope name="liquid.value.number">
                <expression>\b\-?(?:\d+(?:\.\d*)?|(?:\.\d+))\b</expression>
            </scope>
        </collection>
        
        <!-- !Syntax -->
        <collection name="syntax">
            <scope name="liquid.bracket">
                <expression>[\{\(\[\)\]\}]</expression>
            </scope>
            <scope name="liquid.operator">
                <expression>(\+|\-|\*|\/|\%|\/\/|\*\*|\=|\~|\&amp;|\^|\=\=|\!\=|&lt;|&gt;|&gt;\=|&lt;\=|\.\.|\?|\?\:|\?\?|\:|\|)</expression>
            </scope>
            <scope name="liquid.comma">
                <expression>,</expression>
            </scope>
        </collection>
    </collections>
</syntax>